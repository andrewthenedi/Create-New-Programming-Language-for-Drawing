/* This file was generated by SableCC (http://www.sablecc.org/). */

package assignlang.lexer;

import java.io.*;
import assignlang.node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpsemicolon(line, pos); }
    Token new2(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOpequal(line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlank(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{10, 10, 1}, {13, 13, 2}, {32, 32, 3}, {48, 57, 4}, {59, 59, 5}, {61, 61, 6}, {66, 66, 7}, {67, 67, 8}, {68, 68, 9}, {71, 71, 10}, {72, 72, 11}, {76, 76, 12}, {77, 77, 13}, {79, 79, 14}, {80, 80, 15}, {82, 82, 16}, {83, 83, 17}, {87, 87, 18}, {88, 88, 19}, {89, 89, 20}, {98, 98, 21}, {99, 99, 22}, {100, 100, 23}, {103, 103, 24}, {104, 104, 25}, {108, 108, 26}, {109, 109, 27}, {111, 111, 28}, {112, 112, 29}, {114, 114, 30}, {115, 115, 31}, {119, 119, 32}, {121, 121, 33}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{10, 32, -2}, },
            {{48, 57, 4}, },
            {},
            {},
            {{76, 76, 34}, {108, 108, 35}, },
            {{65, 65, 36}, {73, 73, 37}, {79, 79, 38}, {89, 89, 39}, {97, 97, 40}, {105, 105, 41}, {121, 121, 42}, },
            {{65, 65, 43}, {97, 97, 44}, },
            {{82, 82, 45}, {114, 114, 46}, },
            {{69, 69, 47}, {79, 79, 48}, {111, 111, 49}, },
            {{73, 73, 50}, {105, 105, 51}, },
            {{65, 65, 52}, {97, 97, 53}, },
            {{82, 82, 54}, {114, 114, 55}, },
            {{69, 69, 56}, {73, 73, 57}, {101, 101, 58}, {105, 105, 59}, },
            {{69, 69, 60}, {101, 101, 61}, },
            {{72, 72, 62}, {77, 77, 63}, {109, 109, 64}, },
            {{72, 72, 65}, {73, 73, 66}, {104, 104, 67}, },
            {{95, 95, 68}, },
            {{69, 69, 69}, {95, 95, 70}, {101, 101, 71}, },
            {{108, 108, 72}, },
            {{97, 97, 73}, {105, 105, 74}, {121, 121, 75}, },
            {{97, 97, 76}, },
            {{114, 114, 77}, },
            {{111, 111, 78}, },
            {{105, 105, 79}, },
            {{97, 97, 80}, },
            {{114, 114, 81}, },
            {{101, 101, 82}, {105, 105, 83}, },
            {{101, 101, 84}, },
            {{109, 109, 85}, },
            {{104, 104, 86}, },
            {{101, 101, 87}, },
            {{65, 65, 88}, {85, 85, 89}, },
            {{97, 97, 90}, {117, 117, 91}, },
            {{82, 82, 92}, },
            {{82, 82, 93}, },
            {{76, 76, 94}, },
            {{65, 65, 95}, },
            {{114, 114, 96}, },
            {{114, 114, 97}, },
            {{97, 97, 98}, },
            {{82, 82, 99}, },
            {{114, 114, 100}, },
            {{69, 69, 101}, },
            {{101, 101, 102}, },
            {{73, 73, 103}, },
            {{85, 85, 104}, },
            {{117, 117, 105}, },
            {{71, 71, 106}, {78, 78, 107}, },
            {{103, 103, 108}, {110, 110, 109}, },
            {{71, 71, 110}, },
            {{103, 103, 111}, },
            {{65, 65, 112}, },
            {{97, 97, 113}, },
            {{78, 78, 114}, },
            {{78, 78, 115}, },
            {{110, 110, 116}, },
            {{110, 110, 117}, },
            {{67, 67, 118}, {68, 68, 119}, },
            {{99, 99, 120}, {100, 100, 121}, },
            {{65, 65, 122}, },
            {{73, 73, 123}, },
            {{105, 105, 124}, },
            {{73, 73, 125}, },
            {{68, 68, 126}, },
            {{105, 105, 127}, },
            {{67, 67, 128}, {78, 78, 129}, },
            {{76, 76, 130}, },
            {{67, 67, 131}, {78, 78, 132}, },
            {{108, 108, 133}, },
            {{97, 97, 134}, {117, 117, 135}, },
            {{114, 114, 136}, },
            {{114, 114, 137}, },
            {{97, 97, 138}, },
            {{114, 114, 139}, },
            {{101, 101, 140}, },
            {{117, 117, 141}, },
            {{103, 103, 142}, {110, 110, 143}, },
            {{103, 103, 144}, },
            {{97, 97, 145}, },
            {{110, 110, 146}, },
            {{110, 110, 147}, },
            {{99, 99, 148}, {100, 100, 149}, },
            {{105, 105, 150}, },
            {{105, 105, 151}, },
            {{108, 108, 152}, },
            {{67, 67, 153}, },
            {{69, 69, 154}, },
            {{99, 99, 155}, },
            {{101, 101, 156}, },
            {},
            {{67, 67, 157}, },
            {{79, 79, 158}, },
            {{78, 78, 159}, },
            {},
            {{99, 99, 160}, },
            {{110, 110, 161}, },
            {{75, 75, 162}, },
            {{107, 107, 163}, },
            {{69, 69, 164}, },
            {{101, 101, 165}, },
            {{71, 71, 166}, },
            {{83, 83, 167}, },
            {{115, 115, 168}, },
            {{72, 72, 169}, },
            {{69, 69, 170}, },
            {{104, 104, 171}, },
            {{101, 101, 172}, },
            {{69, 69, 173}, },
            {{101, 101, 174}, },
            {{78, 78, 175}, },
            {{110, 110, 176}, },
            {{84, 84, 177}, },
            {{75, 75, 178}, },
            {{116, 116, 179}, },
            {{107, 107, 180}, },
            {{84, 84, 181}, },
            {},
            {{116, 116, 182}, },
            {},
            {{80, 80, 183}, },
            {{76, 76, 184}, },
            {{108, 108, 185}, },
            {{84, 84, 186}, },
            {{84, 84, 187}, },
            {{116, 116, 188}, },
            {{85, 85, 189}, },
            {{69, 69, 190}, },
            {{76, 76, 191}, },
            {{85, 85, 192}, },
            {{69, 69, 193}, },
            {{108, 108, 194}, },
            {{99, 99, 195}, },
            {{101, 101, 196}, },
            {},
            {{99, 99, 197}, },
            {{110, 110, 198}, },
            {{107, 107, 199}, },
            {{101, 101, 200}, },
            {{115, 115, 201}, },
            {{104, 104, 202}, },
            {{101, 101, 203}, },
            {{101, 101, 204}, },
            {{110, 110, 205}, },
            {{116, 116, 206}, },
            {{107, 107, 207}, },
            {{116, 116, 208}, },
            {},
            {{108, 108, 209}, },
            {{116, 116, 210}, },
            {{108, 108, 211}, },
            {{75, 75, 212}, },
            {},
            {{107, 107, 213}, },
            {},
            {{76, 76, 214}, },
            {{82, 82, 215}, },
            {},
            {{108, 108, 216}, },
            {},
            {{32, 32, 217}, },
            {{32, 32, 218}, },
            {{78, 78, 219}, },
            {{110, 110, 220}, },
            {{72, 72, 221}, },
            {{69, 69, 222}, },
            {{101, 101, 223}, },
            {{84, 84, 224}, },
            {},
            {{116, 116, 225}, },
            {},
            {{78, 78, 226}, },
            {{110, 110, 227}, },
            {{71, 71, 228}, },
            {{103, 103, 229}, },
            {{65, 65, 230}, },
            {},
            {{97, 97, 231}, },
            {},
            {{65, 65, 232}, },
            {{97, 97, 233}, },
            {{69, 69, 234}, },
            {{69, 69, 235}, },
            {{101, 101, 236}, },
            {{69, 69, 237}, },
            {{72, 72, 238}, },
            {{101, 101, 239}, },
            {{82, 82, 240}, },
            {{88, 88, 241}, },
            {{79, 79, 242}, },
            {{82, 82, 243}, },
            {{88, 88, 244}, },
            {{111, 111, 245}, },
            {{107, 107, 246}, },
            {},
            {{108, 108, 247}, },
            {},
            {{32, 32, 248}, },
            {{110, 110, 249}, },
            {{101, 101, 250}, },
            {{116, 116, 251}, },
            {},
            {{110, 110, 252}, },
            {{103, 103, 253}, },
            {{97, 97, 254}, },
            {},
            {{97, 97, 255}, },
            {{101, 101, 256}, },
            {{101, 101, 257}, },
            {{111, 111, 258}, },
            {},
            {},
            {{69, 69, 259}, },
            {},
            {{101, 101, 260}, },
            {{71, 71, 261}, {103, 103, 262}, },
            {{71, 71, 263}, {103, 103, 264}, },
            {},
            {},
            {{84, 84, 265}, },
            {},
            {},
            {{32, 32, 266}, },
            {{32, 32, 267}, },
            {{84, 84, 268}, },
            {{116, 116, 269}, },
            {{69, 69, 270}, },
            {{101, 101, 271}, },
            {{71, 71, 272}, },
            {{103, 103, 273}, },
            {{78, 78, 274}, },
            {{110, 110, 275}, },
            {},
            {{89, 89, 276}, },
            {{121, 121, 277}, },
            {},
            {},
            {},
            {{82, 82, 278}, },
            {{84, 84, 279}, },
            {{87, 87, 280}, },
            {{82, 82, 281}, },
            {{84, 84, 282}, },
            {{119, 119, 283}, },
            {},
            {{101, 101, 284}, },
            {{71, 71, 285}, {103, 103, 286}, },
            {},
            {},
            {{32, 32, 287}, },
            {{116, 116, 288}, },
            {{101, 101, 289}, },
            {{103, 103, 290}, },
            {{110, 110, 291}, },
            {{121, 121, 292}, },
            {},
            {{119, 119, 293}, },
            {},
            {},
            {{82, 82, 294}, {114, 114, 295}, },
            {{114, 114, 296}, },
            {{82, 82, 297}, {114, 114, 298}, },
            {{114, 114, 299}, },
            {},
            {{71, 71, 300}, {103, 103, 301}, },
            {{71, 71, 302}, {103, 103, 303}, },
            {{65, 65, 304}, },
            {{97, 97, 305}, },
            {},
            {},
            {{79, 79, 306}, },
            {{111, 111, 307}, },
            {{71, 71, 308}, },
            {{103, 103, 309}, },
            {},
            {},
            {{69, 69, 310}, },
            {},
            {},
            {{69, 69, 311}, },
            {},
            {},
            {},
            {{82, 82, 312}, {114, 114, 313}, },
            {{114, 114, 314}, },
            {{71, 71, 315}, {103, 103, 316}, },
            {{97, 97, 317}, },
            {},
            {{111, 111, 318}, },
            {{103, 103, 319}, },
            {},
            {},
            {{65, 65, 320}, },
            {{97, 97, 321}, },
            {{97, 97, 322}, },
            {{65, 65, 323}, },
            {{97, 97, 324}, },
            {{97, 97, 325}, },
            {{82, 82, 326}, {114, 114, 327}, },
            {{114, 114, 328}, },
            {{82, 82, 329}, {114, 114, 330}, },
            {{114, 114, 331}, },
            {},
            {},
            {{78, 78, 332}, },
            {{110, 110, 333}, },
            {{76, 76, 334}, },
            {{108, 108, 335}, },
            {{78, 78, 336}, },
            {{78, 78, 337}, },
            {{65, 65, 338}, },
            {{97, 97, 339}, },
            {{97, 97, 340}, },
            {{82, 82, 341}, {114, 114, 342}, },
            {{114, 114, 343}, },
            {},
            {{110, 110, 344}, },
            {{108, 108, 345}, },
            {{89, 89, 346}, },
            {{121, 121, 347}, },
            {{121, 121, 348}, },
            {{89, 89, 349}, },
            {{121, 121, 350}, },
            {{121, 121, 351}, },
            {{65, 65, 352}, },
            {{97, 97, 353}, },
            {{97, 97, 354}, },
            {{65, 65, 355}, },
            {{97, 97, 356}, },
            {{97, 97, 357}, },
            {},
            {},
            {{69, 69, 358}, },
            {{101, 101, 359}, },
            {{84, 84, 360}, },
            {{84, 84, 361}, },
            {{89, 89, 362}, },
            {{121, 121, 363}, },
            {{121, 121, 364}, },
            {{65, 65, 365}, },
            {{97, 97, 366}, },
            {{97, 97, 367}, },
            {},
            {{101, 101, 368}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{89, 89, 369}, },
            {{121, 121, 370}, },
            {{121, 121, 371}, },
            {{89, 89, 372}, },
            {{121, 121, 373}, },
            {{121, 121, 374}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{89, 89, 375}, },
            {{121, 121, 376}, },
            {{121, 121, 377}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 3, 3, 3, 0, 1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1, 0, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, -1, -1, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, 0, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, -1, -1, -1, 0, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
