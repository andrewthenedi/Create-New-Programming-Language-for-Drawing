/* This file was generated by SableCC (http://www.sablecc.org/). */

package assignlang.analysis;

import java.util.*;
import assignlang.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAListProgram(AListProgram node)
    {
        defaultIn(node);
    }

    public void outAListProgram(AListProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListProgram(AListProgram node)
    {
        inAListProgram(node);
        if(node.getStatementlist() != null)
        {
            node.getStatementlist().apply(this);
        }
        outAListProgram(node);
    }

    public void inAStmtStatementlist(AStmtStatementlist node)
    {
        defaultIn(node);
    }

    public void outAStmtStatementlist(AStmtStatementlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtStatementlist(AStmtStatementlist node)
    {
        inAStmtStatementlist(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStmtStatementlist(node);
    }

    public void inAListStatementlist(AListStatementlist node)
    {
        defaultIn(node);
    }

    public void outAListStatementlist(AListStatementlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListStatementlist(AListStatementlist node)
    {
        inAListStatementlist(node);
        if(node.getStatementlist() != null)
        {
            node.getStatementlist().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAListStatementlist(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getAssignrest() != null)
        {
            node.getAssignrest().apply(this);
        }
        if(node.getOpequal() != null)
        {
            node.getOpequal().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAAssignAssignrest(AAssignAssignrest node)
    {
        defaultIn(node);
    }

    public void outAAssignAssignrest(AAssignAssignrest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssignrest(AAssignAssignrest node)
    {
        inAAssignAssignrest(node);
        if(node.getOpsemicolon() != null)
        {
            node.getOpsemicolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignAssignrest(node);
    }
}
