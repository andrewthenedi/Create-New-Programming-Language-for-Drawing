/* This file was generated by SableCC (http://www.sablecc.org/). */

package assignlang.node;

import assignlang.analysis.*;

@SuppressWarnings("nls")
public final class AStatement extends PStatement
{
    private TIdentifierColor _identifierColor_;
    private TOpequal _opequal_;
    private TColor _color_;
    private TOpsemicolon _opsemicolon_;

    public AStatement()
    {
        // Constructor
    }

    public AStatement(
        @SuppressWarnings("hiding") TIdentifierColor _identifierColor_,
        @SuppressWarnings("hiding") TOpequal _opequal_,
        @SuppressWarnings("hiding") TColor _color_,
        @SuppressWarnings("hiding") TOpsemicolon _opsemicolon_)
    {
        // Constructor
        setIdentifierColor(_identifierColor_);

        setOpequal(_opequal_);

        setColor(_color_);

        setOpsemicolon(_opsemicolon_);

    }

    @Override
    public Object clone()
    {
        return new AStatement(
            cloneNode(this._identifierColor_),
            cloneNode(this._opequal_),
            cloneNode(this._color_),
            cloneNode(this._opsemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStatement(this);
    }

    public TIdentifierColor getIdentifierColor()
    {
        return this._identifierColor_;
    }

    public void setIdentifierColor(TIdentifierColor node)
    {
        if(this._identifierColor_ != null)
        {
            this._identifierColor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifierColor_ = node;
    }

    public TOpequal getOpequal()
    {
        return this._opequal_;
    }

    public void setOpequal(TOpequal node)
    {
        if(this._opequal_ != null)
        {
            this._opequal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opequal_ = node;
    }

    public TColor getColor()
    {
        return this._color_;
    }

    public void setColor(TColor node)
    {
        if(this._color_ != null)
        {
            this._color_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._color_ = node;
    }

    public TOpsemicolon getOpsemicolon()
    {
        return this._opsemicolon_;
    }

    public void setOpsemicolon(TOpsemicolon node)
    {
        if(this._opsemicolon_ != null)
        {
            this._opsemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opsemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifierColor_)
            + toString(this._opequal_)
            + toString(this._color_)
            + toString(this._opsemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifierColor_ == child)
        {
            this._identifierColor_ = null;
            return;
        }

        if(this._opequal_ == child)
        {
            this._opequal_ = null;
            return;
        }

        if(this._color_ == child)
        {
            this._color_ = null;
            return;
        }

        if(this._opsemicolon_ == child)
        {
            this._opsemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifierColor_ == oldChild)
        {
            setIdentifierColor((TIdentifierColor) newChild);
            return;
        }

        if(this._opequal_ == oldChild)
        {
            setOpequal((TOpequal) newChild);
            return;
        }

        if(this._color_ == oldChild)
        {
            setColor((TColor) newChild);
            return;
        }

        if(this._opsemicolon_ == oldChild)
        {
            setOpsemicolon((TOpsemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
